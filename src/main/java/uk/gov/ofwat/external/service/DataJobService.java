package uk.gov.ofwat.external.service;

import com.google.gson.Gson;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import uk.gov.ofwat.external.domain.CompanyDataInput;
import uk.gov.ofwat.external.domain.DataJob;
import uk.gov.ofwat.external.domain.DataJobStatus;
import uk.gov.ofwat.external.repository.DataJobRepository;
import uk.gov.ofwat.external.service.dto.data.TableDto;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

@Service
@Transactional
public class DataJobService {

    @Autowired
    DataJobRepository dataJobRepository;

    public DataJobService(DataJobRepository dataJobRepository) {
        this.dataJobRepository = dataJobRepository;
    }

    public DataJob createDataJob(CompanyDataInput companyDataInput, TableDto tableDto) {
        DataJob dataJob = new DataJob();
        dataJob.setAuditComment("Generated by DataJobService");
        dataJob.setCompanyDataInputId(companyDataInput.getId());
        dataJob.setCompanyId("" + companyDataInput.getCompany().getId());
        dataJob.setExcelMongoDocId("N/A");
        dataJob.setFountainReportId("" + companyDataInput.getDataInput().getReportId());
        dataJob.setJobStatus(DataJobStatus.CREATED.name());
        dataJob.setRejectedReason("");
        dataJob.setRunId("0");
        dataJob.setUuid(UUID.randomUUID().toString());
        dataJob.setUpdated(false);
        String jobData = convertTableDtoToJson(tableDto);
        dataJob.setData("" + jobData);

        return saveDataJob(dataJob);
    }


    public DataJob saveDataJob(DataJob dataJob) {
        return dataJobRepository.save(dataJob);
    }

    private String convertTableDtoToJson(TableDto tableDto){
        Gson gson = new Gson();
        String json = gson.toJson(tableDto);
        return json;
    }


    public List<DataJob> getNewJobs() {
        List<DataJob> dataJobs = dataJobRepository.findDistinctDataJobsByJobStatusOrderByIdAsc(DataJobStatus.CREATED.name());
        return dataJobs;
    }

    public Optional<DataJob> getDataJobByUuid(String uuid) {
        Optional<DataJob> dataJob = dataJobRepository.findDistinctDataJobByUuid(uuid);
        return dataJob;
    }


    public void updateDataJob(DataJob dataJob) {
        dataJobRepository.updateDataJobForUuid(dataJob.getUuid(), dataJob.getJobStatus(), dataJob.getRejectedReason(), dataJob.getUpdated());
    }

    public Optional<DataJob> getNextDataJob() {
        Optional<DataJob> dataJob = dataJobRepository.findDistinctDataJobByJobStatusOrderByIdAsc(DataJobStatus.CREATED.name());
        return dataJob;
    }
}
